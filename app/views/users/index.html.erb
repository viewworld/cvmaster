
      <!-- start: Content -->
      <div id="content" class="span12">
      
         <ul class="breadcrumb">
          <li>
            <i class="icon-home"></i>
            <a href="/">Home</a> 
          </li>
		 </ul>
        
        <div id="reactContent"></div>
  
        
      </div><!--/#content.span10-->
    </div><!--/fluid-row-->
  </div><!--/fluid-row-->
  
<script type="text/jsx">
  var Root = React.createClass({    
    getInitialState: function() {   
      return {data: []};    
    },
    
    componentDidMount: function() {   
      $.ajax({
        url: this.props.url,
        dataType: 'json',
        cache: false,
        success: function(data) {
          this.setState({data: data});
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });   
	},
  
	filterDBTable: function(data) {
		that = this;
		$.ajax({
			url: this.props.url+"users",
			dataType: 'json',
			data: data,
			cache: false,
			success: function(data) {
			  that.setState({data: data});
			}.bind(that),
			error: function(xhr, status, err) {
			  console.error(that.props.url, status, err.toString());
			}.bind(that)
		});		
	},
  
	updateDBTable: function() {
		var that = this
		setTimeout(function(){
			$.ajax({
				url: that.props.url,
				dataType: 'json',
				cache: false,
				success: function(data) {
				  that.setState({data: data});
				}.bind(that),
				error: function(xhr, status, err) {
				  console.error(that.props.url, status, err.toString());
				}.bind(that)
			});
		
		}, 100)
	},
	
	handleDelete: function(id) {
		var that = this;
		$.ajax({
			url: this.props.url+"delete_user?user_id="+id,
			method: "get",
			dataType: 'json',
			cache: false,
			success: function(data) {
			  that.setState({data: data});
			}.bind(that),
			error: function(xhr, status, err) {
			  console.error(that.props.url, status, err.toString());
			}.bind(that)
		});	
	},
  
	render: function() {
		return(
		   <div>
			<DBTable url={this.props.url} data={this.state.data} filter={this.filterDBTable} handleDelete={this.handleDelete}/>
			<Popup url={this.props.url} updateDBTable={this.updateDBTable}/>
		   </div>
		);
	}
  
  });
	
  var Popup = React.createClass({ 
	componentDidMount: function() {   
		$('#myTab a').click(function (e) {
		  e.preventDefault();
		  $(this).tab('show');
		})
	}, 	  
	
	handleChange: function() {
		if ($("#inputName").val() == "") $("#inputName").addClass("red");
		else $("#inputName").removeClass("red");
	},
	
	addUser: function() {
		var config =  {};
		jQuery("#f_newuser").serializeArray().map(function(item) {
				config[item.name] = item.value;
		});	
		
		if ($("#newuser_2").is(".active")) {
			$.ajax({
				url: this.props.url + "from_podio",
				data: {"item_id": $("#inputPodioID").val(), "authenticity_token": "<%= form_authenticity_token %>", "utf8": "✓"},
				method: "get",
				cache: false,
				success: function(data) {
				  $("#newuser").modal("hide");
				  this.props.updateDBTable();
				}.bind(this)
			});   			
		} else {
			if ($("#inputName").val() == "") $("#inputName").addClass("red");
			else $("#inputName").removeClass("red");
			if ($("#f_newuser .red").length) return;
			$.ajax({
				url: this.props.url + "users",
				data: {"user": config, "authenticity_token": "<%= form_authenticity_token %>", "utf8": "✓"},
				method: "post",
				cache: false,
				success: function(data) {
				  $("#newuser").modal("hide");
				  this.props.updateDBTable();
				}.bind(this)
			});
		}
		
		$("#newuser").modal("hide");	
	},
	
	render: function(){
	 return(
	  <div className="modal hide fade" id="newuser">
		<div className="modal-header">
		  <button type="button" className="close" data-dismiss="modal">×</button>
		  <h3>Add new user</h3>
		</div>
		<div className="modal-body">
		  <ul className="nav nav-pills" id="myTab">
			<li className="active"><a href="#newuser_1">New user</a></li>
			<li><a href="#newuser_2">User from Podio</a></li>
		  </ul>
		   
		  <div className="tab-content">
			<div className="tab-pane active" id="newuser_1">
			<form className="form-horizontal" id="f_newuser">
			  <div className="control-group">
			  <label className="control-label" for="inputName">Name</label>
			  <div className="controls">
				<input type="text" name="name" id="inputName" placeholder="Name"  onChange={this.handleChange}/>
			  </div>
			  </div>
			  <div className="control-group">
			  <label className="control-label" for="inputEmail">Email</label>
			  <div className="controls">
				<input type="text" name="email" id="inputEmail" placeholder="Email" />
			  </div>
			  </div>
			  <div className="control-group">
			  <label className="control-label" for="inputPhone">Phone</label>
			  <div className="controls">
				<input type="text" name="phone" id="inputPhone" placeholder="Phone" />
			  </div>
			  </div>
			  <div className="control-group">
			  <label className="control-label" for="inputSkype">Skype</label>
			  <div className="controls">
				<input type="text" name="skype" id="inputSkype" placeholder="Skype" />
			  </div>
			  </div>
			</form>       
			</div>
			<div className="tab-pane" id="newuser_2">
			<form className="form-horizontal">
			  <div className="control-group">
			  <label className="control-label" for="inputPodioID">Podio ID</label>
			  <div className="controls">
				<input type="text" name="podioid" id="inputPodioID" placeholder="PodioID" />
			  </div>
			  </div>
			</form>         
			</div>
		  </div>          
		</div>
		<div className="modal-footer">
		  <a href="#" className="btn" data-dismiss="modal">Close</a>
		  <a href="#" className="btn btn-primary" onClick={this.addUser}>Add new user</a>
		</div>
	  </div>
	 );
	}
  
  });

  var DBTable = React.createClass({
    getInitialState: function() {   
      return {data: []};    
    },
    
    componentDidMount: function() {   	  
		var that = this;
		$("input[data-role=tagsinput], select[multiple][data-role=tagsinput]").tagsinput();
		$("input[data-role=tagsinput], select[multiple][data-role=tagsinput]").on('itemAdded', function() {
			that.handleChange();
		} ).on('itemRemoved', function() {
			that.handleChange();
		} );
	  
		$('.btn-modal-popup').click(function(e){
			e.preventDefault();
			$($(this).attr("href")).modal('show');
		});
    },
	
	handleChange: function() {
		var years = React.findDOMNode(this.refs.years).value;
		var months = React.findDOMNode(this.refs.months).value;
		var tech = React.findDOMNode(this.refs.tech).value;
		var keywords = React.findDOMNode(this.refs.keywords).value;
		var sortby = React.findDOMNode(this.refs.sortby).value;
		this.props.filter({years: years, months: months, tech: tech, keywords: keywords, sortby: sortby});
	},
	
	handleClear: function() {
		React.findDOMNode(this.refs.years).value = "";
		React.findDOMNode(this.refs.months).value = "";
		$(".dbtable-container .bootstrap-tagsinput").tagsinput("removeAll");
		var sortby = React.findDOMNode(this.refs.sortby).value;
		this.props.filter({years: "", months: "", tech: "", keywords: "", sortby: sortby});
	},
	
	handlePress: function(e) {
		if(e.keyCode == 13)
			this.handleChange();
	},
    
    render: function() {    
	  that = this;
      var dataNodes = this.props.data.map(function (row) {
        return (
        <DBTableRow 
          id={row.id} name={row.name} email={row.email} podio_id={row.podio_id} podio_url={row.podio_url} 
          skills={row.skills.map(function(r){return r.skill_name;})} 
          tech={row.techs.map(function(r){return r.technology_name;})}
          projects={row.projects.length} 
          jobs={row.jobs.length} 
          status={row.status}
		  country={row.country}
		  handleDelete={that.props.handleDelete}
        />
        );
      });
    
      return (
        <div className="row-fluid dbtable-container">   
        <div className="box span12">
          <div className="box-header" data-original-title>
            <h2><i className="halflings-icon white user"></i><span className="break"></span>CV Database</h2>
            <div className="box-icon">
              <a href="#newuser" className="btn-modal-popup"><i className="halflings-icon white plus"></i> Add new user</a>
            </div>
          </div>
          <div className="box-content">
            <div className="row-fluid">
              <div className="span2 fp-nomargin">
                <label>
                  Exp.: 
				  <input ref="years" type="text" size="4" onKeyDown={this.handlePress} placeholder="years" className="fp-nomargin fp-autowidth" style={{marginLeft: '10px !Important'}}/>
				  <input ref="months" type="text" size="4" onKeyDown={this.handlePress} placeholder="months" className="fp-nomargin fp-autowidth" />
                </label>
              </div>
              
              <div className="span1 fp-nomargin" style={{padding: '4px 0'}}>
                <label>Technology:</label>
              </div>
              <div className="span7 fp-nomargin align-right">
                <label>
                  <input type="text" ref="tech" className="fp-nomargin" data-role="tagsinput" />
                </label>
              </div>
              <div className="span2 fp-nomargin pull-right align-right">
                <label>
                  <select size="1" ref="sortby" id="sortby" onChange={this.handleChange} className="fp-nomargin fp-fullwidth" style={{height:'30px'}}>
                    <option value="created" selected="selected">Sort by creation date</option>
                    <option value="modified">Sort by modification date</option>
                    <option value="projects">Project count</option>
                    <option value="jobs">Job count</option>
                    <option value="status">Status</option>
                    <option value="country">Country</option>
                  </select> 
                </label>
              </div>
            </div>
            <div className="row-fluid">
              <div className="span2 fp-nomargin">
              </div>
              
              <div className="span1 fp-nomargin" style={{padding: '4px 0'}}>
                <label>Keywords:</label>
              </div>                        
              <div className="span7 fp-nomargin align-right">
                <label>
                  <input type="text" data-role="tagsinput" ref="keywords" className="fp-nomargin fp-autowidth"  />
                </label>
              </div>                      
              <div className="span1 fp-nomargin">
                <button className="btn btn-primary input fp-fullwidth" type="submit" onClick={this.handleChange}><i className="icon-search"></i> Search</button> 
              </div>
              <div className="span1 fp-nomargin">
                <button className="btn input fp-fullwidth" style={{width:'95%', marginLeft:'5%'}} onClick={this.handleClear}><i className="icon-remove"></i> Clear</button> 
              </div>
            </div>
            <table className="table table-striped table-bordered">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Podio ID</th>
                  <th>Skills</th>
                  <th>Tech</th>
                  <th>Projects</th>
                  <th>Jobs</th>
                  <th>Status</th>
                  <th>Country</th>
                  <th>Actions</th>
                </tr>
              </thead>   
              <tbody>
				  {dataNodes}
              </tbody>
            </table>            
          </div>
        </div>
      </div>
      );
    }
  });
  
  var DBTableRow = React.createClass({
    getInitialState: function() {
		return {statusClass: "label-success"};
    },
	
	handleDelete: function(id) {
		if (confirm("Are you sure you want to delete '" + this.props.name + "'? This can't be undone.") == false){
			e.preventDefault();
			return;
		}
		this.props.handleDelete(this.props.id);
	},
	
    render: function() {
    var classes = "label " + this.state.statusClass;
	var editUrl= "/users/" + this.props.id + "/edit/";
	var skills = this.props.skills.join(", ");
	var tech = this.props.tech.join(", ")
    return (
      <tr>
        <td>{this.props.name}</td>
        <td className="center">{this.props.email}</td>
        <td className="center"><a href={this.props.podio_url} target="_blank">{this.props.podio_id}</a></td>
        <td>{skills}</td>
        <td>{tech}</td>
        <td>{this.props.projects}</td>
        <td>{this.props.jobs}</td>
        <td>
          <span className={classes}>{this.props.status}</span>
        </td>
		<td>{this.props.country}</td>
        <td className="center">
          <a className="btn btn-success" href="#" style={{display:'none'}}>
            <i className="halflings-icon white zoom-in"></i>  
          </a>
          <a className="btn btn-info" href={editUrl}>
            <i className="halflings-icon white edit"></i>  
          </a>
          <a className="btn btn-danger" href="#" onClick={this.handleDelete}>
            <i className="halflings-icon white trash"></i> 
          </a>
        </td>
      </tr>
    );
    }
  }); 
  
  React.render(
    <Root url="/" />,
    document.getElementById('reactContent')
  );
</script> 